{"ast":null,"code":"var _jsxFileName = \"/Users/jgaethan/Documents/SPRING-2025/Introduction-Software-Engineering/Quiz-App/SENG2513/client/src/pages/TakeQuiz.js\";\n// pages/TakeQuiz.js\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport QuestionCard from '../components/QuestionCard';\nimport QuizResult from '../components/QuizResult';\nimport QuizExplanations from '../components/QuizExplanations';\nimport axios from 'axios';\nconst TakeQuiz = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [quizData, setQuizData] = useState([]);\n  const [quizTopic, setQuizTopic] = useState('');\n  const [quizDifficulty, setQuizDifficulty] = useState('');\n  const [quizID, setQuizID] = useState('');\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState('');\n  const [score, setScore] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const [showExplanations, setShowExplanations] = useState(false);\n  const [totalAttempts, setTotalAttempts] = useState(0);\n  const [quizType, setQuizType] = useState('');\n  const hasSavedAlready = useRef(false);\n  const isLogin = localStorage.getItem(\"isLogin\") === \"true\";\n  const userID = localStorage.getItem(\"userID\");\n\n  // Load quiz data on component mount\n  useEffect(() => {\n    var _location$state;\n    if ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.questions) {\n      const newQuizID = location.state.quizID;\n      setQuizData(location.state.questions);\n      setQuizTopic(location.state.topic || 'Quiz');\n      setQuizDifficulty(location.state.difficulty);\n      setQuizID(newQuizID);\n      setQuizType(location.state.type);\n      setUserAnswers(new Array(location.state.questions.length).fill(''));\n    } else {\n      navigate('/quiz-generator/ai');\n    }\n  }, [location, navigate]);\n\n  // Save quiz results function\n  const saveQuizResults = async () => {\n    // Don't proceed if user not logged in or no quiz ID\n    if (!isLogin || !userID || !quizID) {\n      return;\n    }\n\n    // Check if we've already saved this exact quiz attempt using sessionStorage\n    const saveKey = `quiz_${quizID}_saved`;\n    if (sessionStorage.getItem(saveKey) === 'true') {\n      console.log(\"SKIPPING SAVE: This quiz result was already saved in this session\");\n      return;\n    }\n\n    // Immediately mark as saved to prevent duplicate saves\n    sessionStorage.setItem(saveKey, 'true');\n    console.log(`Setting session storage ${saveKey} to true`);\n    try {\n      console.log(\"Saving quiz result...\");\n\n      // Step 1: Save explanations\n      const explanationResponse = await axios.post('https://localhost:3001/api/explanations/save', {\n        userID,\n        quizID,\n        topic: quizTopic,\n        explanationData: {\n          quizData,\n          userAnswers\n        }\n      });\n      const explanationID = explanationResponse.data.explanationID;\n      console.log(\"Explanation saved with ID:\", explanationID);\n\n      // Step 2: Save quiz results\n      const resultPayload = {\n        userID,\n        topic: quizTopic,\n        score,\n        total: quizData.length,\n        attempts: totalAttempts,\n        difficulty: quizDifficulty,\n        quizID,\n        explanationID\n      };\n      const resultRes = await axios.post(\"https://localhost:3001/api/result/save-results\", resultPayload);\n      if (resultRes.status === 200) {\n        console.log(\"Saved results successfully\");\n      }\n    } catch (err) {\n      console.error(\"Failed to save quiz result or explanations:\", err);\n      // Even on error, don't remove the \"saved\" flag - prevent retries\n    }\n  };\n  const handleNextQuestion = () => {\n    // Save the user's answer for the current question\n    const newUserAnswers = [...userAnswers];\n    newUserAnswers[currentQuestion] = selectedAnswer;\n    setUserAnswers(newUserAnswers);\n\n    // Check if the answer is correct and update score\n    if (selectedAnswer === quizData[currentQuestion].correctAnswer) {\n      setScore(score + 1);\n    }\n\n    // Move to next question or show results\n    if (currentQuestion < quizData.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n      setSelectedAnswer('');\n    } else {\n      // Last question completed - show results and try to save\n      setShowResults(true);\n      setTotalAttempts(totalAttempts + 1);\n\n      // Call save directly and only here - not in useEffect, not in child components\n      setTimeout(() => saveQuizResults(), 100); // Small delay to ensure state is updated\n    }\n  };\n  const handleRetakeQuiz = () => {\n    // Clear session storage saved flag for this quiz when retaking\n    if (quizID) {\n      const saveKey = `quiz_${quizID}_saved`;\n      sessionStorage.removeItem(saveKey);\n    }\n    setCurrentQuestion(0);\n    setSelectedAnswer('');\n    setScore(0);\n    setUserAnswers(new Array(quizData.length).fill(''));\n    setShowResults(false);\n    setShowExplanations(false);\n  };\n  const handleContinueTrying = () => {\n    setCurrentQuestion(0);\n    setSelectedAnswer('');\n    setScore(0);\n    setShowResults(false);\n  };\n  const handleBackToResults = () => {\n    setShowExplanations(false);\n  };\n  if (!quizData.length) return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 34\n    }\n  }, \"Loading...\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container text-white mt-4 mb-4 p-4 border-0 rounded-4\",\n    style: {\n      backgroundColor: \"#1a1a1a\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, quizTopic, \" Quiz\"), !showResults ? /*#__PURE__*/React.createElement(QuestionCard, {\n    question: quizData[currentQuestion],\n    current: currentQuestion,\n    total: quizData.length,\n    selectedAnswer: selectedAnswer,\n    onSelect: setSelectedAnswer,\n    onNext: handleNextQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }) : !showExplanations ? /*#__PURE__*/React.createElement(QuizResult, {\n    topic: quizTopic,\n    score: score,\n    quizID: quizID,\n    total: quizData.length,\n    attempts: totalAttempts,\n    onTryAgain: handleContinueTrying,\n    difficulty: quizDifficulty,\n    onShowExplanations: () => setShowExplanations(true),\n    navigate: navigate,\n    quizData: quizData,\n    userAnswers: userAnswers,\n    quizType: quizType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(QuizExplanations, {\n    quizData: quizData,\n    userAnswers: userAnswers,\n    onRetake: handleRetakeQuiz,\n    onBackToResults: handleBackToResults,\n    navigate: navigate,\n    readOnly: false,\n    quizType: quizType,\n    quizID: quizID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }));\n};\nexport default TakeQuiz;","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","QuestionCard","QuizResult","QuizExplanations","axios","TakeQuiz","location","navigate","quizData","setQuizData","quizTopic","setQuizTopic","quizDifficulty","setQuizDifficulty","quizID","setQuizID","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","score","setScore","userAnswers","setUserAnswers","showResults","setShowResults","showExplanations","setShowExplanations","totalAttempts","setTotalAttempts","quizType","setQuizType","hasSavedAlready","useRef","isLogin","localStorage","getItem","userID","_location$state","state","questions","newQuizID","topic","difficulty","type","Array","length","fill","saveQuizResults","saveKey","sessionStorage","console","log","setItem","explanationResponse","post","explanationData","explanationID","data","resultPayload","total","attempts","resultRes","status","err","error","handleNextQuestion","newUserAnswers","correctAnswer","setTimeout","handleRetakeQuiz","removeItem","handleContinueTrying","handleBackToResults","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","question","current","onSelect","onNext","onTryAgain","onShowExplanations","onRetake","onBackToResults","readOnly"],"sources":["/Users/jgaethan/Documents/SPRING-2025/Introduction-Software-Engineering/Quiz-App/SENG2513/client/src/pages/TakeQuiz.js"],"sourcesContent":["// pages/TakeQuiz.js\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport QuestionCard from '../components/QuestionCard';\nimport QuizResult from '../components/QuizResult';\nimport QuizExplanations from '../components/QuizExplanations';\nimport axios from 'axios';\n\nconst TakeQuiz = () => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const [quizData, setQuizData] = useState([]);\n    const [quizTopic, setQuizTopic] = useState('');\n    const [quizDifficulty, setQuizDifficulty] = useState('');\n    const [quizID, setQuizID] = useState('');\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [selectedAnswer, setSelectedAnswer] = useState('');\n    const [score, setScore] = useState(0);\n    const [userAnswers, setUserAnswers] = useState([]);\n    const [showResults, setShowResults] = useState(false);\n    const [showExplanations, setShowExplanations] = useState(false);\n    const [totalAttempts, setTotalAttempts] = useState(0);\n    const [quizType, setQuizType] = useState('');\n    const hasSavedAlready = useRef(false);\n\n\n    const isLogin = localStorage.getItem(\"isLogin\") === \"true\";\n    const userID = localStorage.getItem(\"userID\");\n\n    // Load quiz data on component mount\n    useEffect(() => {\n        if (location.state?.questions) {\n            const newQuizID = location.state.quizID;\n            \n            setQuizData(location.state.questions);\n            setQuizTopic(location.state.topic || 'Quiz');\n            setQuizDifficulty(location.state.difficulty);\n            setQuizID(newQuizID);\n            setQuizType(location.state.type);\n            setUserAnswers(new Array(location.state.questions.length).fill(''));\n        } else {\n            navigate('/quiz-generator/ai');\n        }\n    }, [location, navigate]);\n    \n    // Save quiz results function\n    const saveQuizResults = async () => {\n        // Don't proceed if user not logged in or no quiz ID\n        if (!isLogin || !userID || !quizID) {\n            return;\n        }\n        \n        // Check if we've already saved this exact quiz attempt using sessionStorage\n        const saveKey = `quiz_${quizID}_saved`;\n        if (sessionStorage.getItem(saveKey) === 'true') {\n            console.log(\"SKIPPING SAVE: This quiz result was already saved in this session\");\n            return;\n        }\n        \n        // Immediately mark as saved to prevent duplicate saves\n        sessionStorage.setItem(saveKey, 'true');\n        console.log(`Setting session storage ${saveKey} to true`);\n        \n        try {\n            console.log(\"Saving quiz result...\");\n            \n            // Step 1: Save explanations\n            const explanationResponse = await axios.post('https://localhost:3001/api/explanations/save', {\n                userID,\n                quizID,\n                topic: quizTopic,\n                explanationData: {\n                    quizData,\n                    userAnswers\n                }\n            });\n            \n            const explanationID = explanationResponse.data.explanationID;\n            console.log(\"Explanation saved with ID:\", explanationID);\n            \n            // Step 2: Save quiz results\n            const resultPayload = {\n                userID,\n                topic: quizTopic,\n                score,\n                total: quizData.length,\n                attempts: totalAttempts,\n                difficulty: quizDifficulty,\n                quizID,\n                explanationID,\n            };\n            \n            const resultRes = await axios.post(\"https://localhost:3001/api/result/save-results\", resultPayload);\n            if (resultRes.status === 200) {\n                console.log(\"Saved results successfully\");\n            }\n        } catch (err) {\n            console.error(\"Failed to save quiz result or explanations:\", err);\n            // Even on error, don't remove the \"saved\" flag - prevent retries\n        }\n    };\n\n    const handleNextQuestion = () => {\n        // Save the user's answer for the current question\n        const newUserAnswers = [...userAnswers];\n        newUserAnswers[currentQuestion] = selectedAnswer;\n        setUserAnswers(newUserAnswers);\n        \n        // Check if the answer is correct and update score\n        if (selectedAnswer === quizData[currentQuestion].correctAnswer) {\n            setScore(score + 1);\n        }\n        \n        // Move to next question or show results\n        if (currentQuestion < quizData.length - 1) {\n            setCurrentQuestion(currentQuestion + 1);\n            setSelectedAnswer('');\n        } else {\n            // Last question completed - show results and try to save\n            setShowResults(true);\n            setTotalAttempts(totalAttempts + 1);\n            \n            // Call save directly and only here - not in useEffect, not in child components\n            setTimeout(() => saveQuizResults(), 100); // Small delay to ensure state is updated\n        }\n    };\n\n    const handleRetakeQuiz = () => {\n        // Clear session storage saved flag for this quiz when retaking\n        if (quizID) {\n            const saveKey = `quiz_${quizID}_saved`;\n            sessionStorage.removeItem(saveKey);\n        }\n        \n        setCurrentQuestion(0);\n        setSelectedAnswer('');\n        setScore(0);\n        setUserAnswers(new Array(quizData.length).fill(''));\n        setShowResults(false);\n        setShowExplanations(false);\n    };\n\n    const handleContinueTrying = () => {\n        setCurrentQuestion(0);\n        setSelectedAnswer('');\n        setScore(0);\n        setShowResults(false);\n    };\n\n    const handleBackToResults = () => {\n        setShowExplanations(false);\n    };\n\n    if (!quizData.length) return <div className=\"container mt-5 text-center\">Loading...</div>;\n\n    return (\n        <div className=\"container text-white mt-4 mb-4 p-4 border-0 rounded-4\" style={{backgroundColor: \"#1a1a1a\"}}>\n            <h1 className=\"text-center mb-4\">{quizTopic} Quiz</h1>\n            {!showResults ? (\n                <QuestionCard\n                    question={quizData[currentQuestion]}\n                    current={currentQuestion}\n                    total={quizData.length}\n                    selectedAnswer={selectedAnswer}\n                    onSelect={setSelectedAnswer}\n                    onNext={handleNextQuestion}\n                />\n            ) : !showExplanations ? (\n                <QuizResult\n                    topic={quizTopic}\n                    score={score}\n                    quizID={quizID}\n                    total={quizData.length}\n                    attempts={totalAttempts}\n                    onTryAgain={handleContinueTrying}\n                    difficulty={quizDifficulty}\n                    onShowExplanations={() => setShowExplanations(true)}\n                    navigate={navigate}\n                    quizData={quizData}\n                    userAnswers={userAnswers}\n                    quizType={quizType}\n                   \n                />\n            ) : (\n                <QuizExplanations\n                    quizData={quizData}\n                    userAnswers={userAnswers}\n                    onRetake={handleRetakeQuiz}\n                    onBackToResults={handleBackToResults}\n                    navigate={navigate}\n                    readOnly={false}\n                    quizType={quizType}\n                    quizID={quizID}\n                   \n                />\n            )}\n        </div>\n    );\n}\n\nexport default TakeQuiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}