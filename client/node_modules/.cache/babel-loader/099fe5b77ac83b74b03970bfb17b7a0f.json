{"ast":null,"code":"var _jsxFileName = \"/Users/jgaethan/Documents/SPRING-2025/Introduction-Software-Engineering/Quiz-App/SENG2513/client/src/pages/Login.js\";\nimport React, { useState } from \"react\";\nimport AuthForm from \"../components/AuthForm\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { useNavigate } from \"react-router-dom\";\nconst Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const navigate = useNavigate();\n  const handleLogin = event => {\n    event.preventDefault(); // Prevent page refresh\n\n    // Perform local authentication logic\n    if (email === \"test@example.com\" && password === \"password123\") {\n      console.log(\"Login successful\");\n      localStorage.setItem(\"isLogin\", \"true\");\n      navigate(\"/home\");\n      // Redirect or perform further actions upon successful login\n    } else {\n      console.error(\"Invalid email or password\");\n    }\n\n    //We'll send the login data to an API endpoint here\n    console.log(\"Login data:\", {\n      email,\n      password\n    });\n\n    // Reset form fields after submission\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n  const handleGoogleSuccess = credentialResponse => {\n    const token = credentialResponse.credential;\n    fetch(\"https://localhost:3001/api/auth/google\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        credential: token\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(\"Server response:\", data);\n      localStorage.setItem(\"isLogin\", \"true\");\n      localStorage.setItem(\"userName\", data.username);\n      navigate(\"/\");\n      // Store JWT or user data if needed\n    }).catch(err => console.error(\"Auth error\", err));\n    console.log(\"Google credential:\", credentialResponse);\n    console.log(\"Decoded token:\", jwtDecode(token));\n  };\n  const handleGoogleError = () => {\n    console.log(\"Google login failed\");\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex justify-content-center align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AuthForm, {\n    onSubmit: handleLogin,\n    isLogin: true // Sign-up mode \n    ,\n    email: email,\n    setEmail: setEmail,\n    password: password,\n    setPassword: setPassword,\n    showGoogleButton: true,\n    onGoogleSuccess: handleGoogleSuccess,\n    onGoogleError: handleGoogleError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }));\n};\nexport default Login;","map":{"version":3,"names":["React","useState","AuthForm","jwtDecode","useNavigate","Login","email","setEmail","password","setPassword","navigate","handleLogin","event","preventDefault","console","log","localStorage","setItem","error","handleGoogleSuccess","credentialResponse","token","credential","fetch","method","headers","body","JSON","stringify","then","res","json","data","username","catch","err","handleGoogleError","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","isLogin","showGoogleButton","onGoogleSuccess","onGoogleError"],"sources":["/Users/jgaethan/Documents/SPRING-2025/Introduction-Software-Engineering/Quiz-App/SENG2513/client/src/pages/Login.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport AuthForm from \"../components/AuthForm\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nconst Login = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const navigate = useNavigate();\n\n\n    const handleLogin = (event) => {\n        event.preventDefault(); // Prevent page refresh\n\n        // Perform local authentication logic\n        if (email === \"test@example.com\" && password === \"password123\") {\n            console.log(\"Login successful\");\n            localStorage.setItem(\"isLogin\", \"true\");\n            navigate(\"/home\");\n            // Redirect or perform further actions upon successful login\n        } else {\n            console.error(\"Invalid email or password\");\n        }\n      \n        //We'll send the login data to an API endpoint here\n        console.log(\"Login data:\", { email, password });\n\n        // Reset form fields after submission\n        setEmail(\"\");\n        setPassword(\"\");\n    };\n\n    const handleGoogleSuccess = (credentialResponse) => {\n        const token = credentialResponse.credential;\n\n        fetch(\"https://localhost:3001/api/auth/google\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ credential: token }),\n        })\n            .then(res => res.json())\n            .then(data => {\n                console.log(\"Server response:\", data);\n                localStorage.setItem(\"isLogin\", \"true\");\n                localStorage.setItem(\"userName\", data.username);\n                navigate(\"/\");\n                // Store JWT or user data if needed\n            })\n            .catch(err => console.error(\"Auth error\", err));\n\n        console.log(\"Google credential:\", credentialResponse);\n        console.log(\"Decoded token:\", jwtDecode(token));\n    };\n\n    const handleGoogleError = () => {\n        console.log(\"Google login failed\");\n    };\n\n\n    return (\n        <div className=\"d-flex justify-content-center align-items-center\">\n            <AuthForm\n                onSubmit={handleLogin}\n                isLogin={true} // Sign-up mode \n                email={email}\n                setEmail={setEmail}\n                password={password}\n                setPassword={setPassword}\n                showGoogleButton={true}\n                onGoogleSuccess={handleGoogleSuccess}\n                onGoogleError={handleGoogleError}\n            />\n        </div>\n    );\n\n};\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}