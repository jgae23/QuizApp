{"ast":null,"code":"var _jsxFileName = \"/Users/jgaethan/Documents/SPRING-2025/Introduction-Software-Engineering/Quiz-App/SENG2513/client/src/pages/TakeQuiz.js\";\n// pages/TakeQuiz.js\n// pages/TakeQuiz.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport QuestionCard from '../components/QuestionCard';\nimport QuizResult from '../components/QuizResult';\nimport QuizExplanations from '../components/QuizExplanations';\nimport axios from 'axios';\nconst TakeQuiz = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [quizData, setQuizData] = useState([]);\n  const [quizTopic, setQuizTopic] = useState('');\n  const [quizDifficulty, setQuizDifficulty] = useState('');\n  const [quizID, setQuizID] = useState('');\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState('');\n  const [score, setScore] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const [showExplanations, setShowExplanations] = useState(false);\n  const [totalAttempts, setTotalAttempts] = useState(0);\n  const [quizType, setQuizType] = useState('');\n  const [hasSaved, setHasSaved] = useState(false);\n\n  // Don't use state for tracking saved status - use refs exclusively\n  const saveInitiated = useRef(false);\n  const quizSavedRef = useRef(false);\n  const isLogin = localStorage.getItem(\"isLogin\") === \"true\";\n  const userID = localStorage.getItem(\"userID\");\n\n  // Load quiz data on component mount\n  useEffect(() => {\n    var _location$state;\n    if ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.questions) {\n      setQuizData(location.state.questions);\n      setQuizTopic(location.state.topic || 'Quiz');\n      setQuizDifficulty(location.state.difficulty);\n      setQuizID(location.state.quizID);\n      setQuizType(location.state.type);\n      setUserAnswers(new Array(location.state.questions.length).fill(''));\n\n      // Reset saving flags on new quiz load\n      saveInitiated.current = false;\n      quizSavedRef.current = false;\n    } else {\n      navigate('/quiz-generator/ai');\n    }\n  }, [location, navigate]);\n\n  // Save quiz results function\n  const saveQuizResults = async () => {\n    if (!isLogin || saveInitiated.current || !userID || quizSavedRef.current || !quizData.length) {\n      console.log(\"Skipping save operation:\", {\n        saveInitiated: saveInitiated.current,\n        isLogin,\n        userID: !!userID,\n        quizSaved: quizSavedRef.current,\n        quizDataLength: quizData.length\n      });\n      return;\n    }\n\n    // Mark as initiated immediately\n    saveInitiated.current = true;\n    console.log(\"âš¡ Save initiated\");\n    try {\n      console.log(\"Saving quiz result...\");\n\n      // Step 1: Save explanations\n      const explanationResponse = await axios.post('https://localhost:3001/api/explanations/save', {\n        userID,\n        quizID,\n        topic: quizTopic,\n        explanationData: {\n          quizData,\n          userAnswers\n        }\n      });\n      const explanationID = explanationResponse.data.explanationID;\n      console.log(\"Explanation saved with ID:\", explanationID);\n\n      // Step 2: Save quiz results\n      const resultPayload = {\n        userID,\n        topic: quizTopic,\n        score,\n        total: quizData.length,\n        attempts: totalAttempts,\n        difficulty: quizDifficulty,\n        quizID,\n        explanationID\n      };\n      const resultRes = await axios.post(\"https://localhost:3001/api/result/save-results\", resultPayload);\n      if (resultRes.status === 200) {\n        console.log(\"Saved results successfully\");\n        quizSavedRef.current = true;\n      }\n    } catch (err) {\n      console.error(\"Failed to save quiz result or explanations:\", err);\n    }\n  };\n  const handleNextQuestion = () => {\n    // Save the user's answer for the current question\n    const newUserAnswers = [...userAnswers];\n    newUserAnswers[currentQuestion] = selectedAnswer;\n    setUserAnswers(newUserAnswers);\n\n    // Check if the answer is correct and update score\n    if (selectedAnswer === quizData[currentQuestion].correctAnswer) {\n      setScore(score + 1);\n    }\n\n    // Move to next question or show results\n    if (currentQuestion < quizData.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n      setSelectedAnswer('');\n    } else {\n      setShowResults(true);\n      // Increment total attempts when quiz is completed\n      setTotalAttempts(totalAttempts + 1);\n\n      // Call save directly here when quiz completes\n      saveQuizResults();\n    }\n  };\n  const handleRetakeQuiz = () => {\n    setCurrentQuestion(0);\n    setSelectedAnswer('');\n    setScore(0);\n    // Clear user answers\n    setUserAnswers(new Array(quizData.length).fill(''));\n    // Reset to first question\n    setShowResults(false);\n    setShowExplanations(false);\n\n    // Reset saved state when retaking quiz\n    saveInitiated.current = false;\n    quizSavedRef.current = false;\n  };\n  const handleContinueTrying = () => {\n    // Reset to first question for another attempt\n    setCurrentQuestion(0);\n    setSelectedAnswer('');\n    setScore(0);\n    setShowResults(false);\n    // Keep user's previous answers for reference\n  };\n\n  // Go back to results without remounting QuizResult\n  const handleBackToResults = () => {\n    setHasSaved(\"true\");\n    setShowExplanations(false);\n  };\n  if (!quizData.length) return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 34\n    }\n  }, \"Loading...\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container text-white mt-4 mb-4 p-4 border-0 rounded-4\",\n    style: {\n      backgroundColor: \"#1a1a1a\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, quizTopic, \" Quiz\"), !showResults ? /*#__PURE__*/React.createElement(QuestionCard, {\n    question: quizData[currentQuestion],\n    current: currentQuestion,\n    total: quizData.length,\n    selectedAnswer: selectedAnswer,\n    onSelect: setSelectedAnswer,\n    onNext: handleNextQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }) : !showExplanations ? /*#__PURE__*/React.createElement(QuizResult, {\n    topic: quizTopic,\n    score: score,\n    quizID: quizID,\n    total: quizData.length,\n    attempts: totalAttempts,\n    onTryAgain: handleContinueTrying,\n    difficulty: quizDifficulty,\n    onShowExplanations: () => setShowExplanations(true),\n    navigate: navigate,\n    quizData: quizData,\n    userAnswers: userAnswers,\n    quizType: quizType\n    // Remove all saving logic from QuizResult\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(QuizExplanations, {\n    quizData: quizData,\n    userAnswers: userAnswers,\n    onRetake: handleRetakeQuiz,\n    onBackToResults: handleBackToResults,\n    navigate: navigate,\n    readOnly: false,\n    quizType: quizType,\n    quizID: quizID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }));\n};\nexport default TakeQuiz;","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","useNavigate","QuestionCard","QuizResult","QuizExplanations","axios","TakeQuiz","location","navigate","quizData","setQuizData","quizTopic","setQuizTopic","quizDifficulty","setQuizDifficulty","quizID","setQuizID","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","score","setScore","userAnswers","setUserAnswers","showResults","setShowResults","showExplanations","setShowExplanations","totalAttempts","setTotalAttempts","quizType","setQuizType","hasSaved","setHasSaved","saveInitiated","quizSavedRef","isLogin","localStorage","getItem","userID","_location$state","state","questions","topic","difficulty","type","Array","length","fill","current","saveQuizResults","console","log","quizSaved","quizDataLength","explanationResponse","post","explanationData","explanationID","data","resultPayload","total","attempts","resultRes","status","err","error","handleNextQuestion","newUserAnswers","correctAnswer","handleRetakeQuiz","handleContinueTrying","handleBackToResults","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","question","onSelect","onNext","onTryAgain","onShowExplanations","onRetake","onBackToResults","readOnly"],"sources":["/Users/jgaethan/Documents/SPRING-2025/Introduction-Software-Engineering/Quiz-App/SENG2513/client/src/pages/TakeQuiz.js"],"sourcesContent":["// pages/TakeQuiz.js\n// pages/TakeQuiz.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport QuestionCard from '../components/QuestionCard';\nimport QuizResult from '../components/QuizResult';\nimport QuizExplanations from '../components/QuizExplanations';\nimport axios from 'axios';\n\nconst TakeQuiz = () => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const [quizData, setQuizData] = useState([]);\n    const [quizTopic, setQuizTopic] = useState('');\n    const [quizDifficulty, setQuizDifficulty] = useState('');\n    const [quizID, setQuizID] = useState('');\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [selectedAnswer, setSelectedAnswer] = useState('');\n    const [score, setScore] = useState(0);\n    const [userAnswers, setUserAnswers] = useState([]);\n    const [showResults, setShowResults] = useState(false);\n    const [showExplanations, setShowExplanations] = useState(false);\n    const [totalAttempts, setTotalAttempts] = useState(0);\n    const [quizType, setQuizType] = useState('');\n    const [hasSaved, setHasSaved] = useState(false);\n    \n    // Don't use state for tracking saved status - use refs exclusively\n    const saveInitiated = useRef(false);\n    const quizSavedRef = useRef(false);\n\n    const isLogin = localStorage.getItem(\"isLogin\") === \"true\";\n    const userID = localStorage.getItem(\"userID\");\n\n    // Load quiz data on component mount\n    useEffect(() => {\n        if (location.state?.questions) {\n            setQuizData(location.state.questions);\n            setQuizTopic(location.state.topic || 'Quiz');\n            setQuizDifficulty(location.state.difficulty);\n            setQuizID(location.state.quizID);\n            setQuizType(location.state.type);\n            setUserAnswers(new Array(location.state.questions.length).fill(''));\n            \n            // Reset saving flags on new quiz load\n            saveInitiated.current = false;\n            quizSavedRef.current = false;\n        } else {\n            navigate('/quiz-generator/ai');\n        }\n    }, [location, navigate]);\n    \n    // Save quiz results function\n    const saveQuizResults = async () => {\n        if (!isLogin || saveInitiated.current || !userID || quizSavedRef.current || !quizData.length\n        ) {\n            console.log(\"Skipping save operation:\", {\n                saveInitiated: saveInitiated.current,\n                isLogin,\n                userID: !!userID,\n                quizSaved: quizSavedRef.current,\n                quizDataLength: quizData.length\n            });\n            return;\n        }\n        \n        // Mark as initiated immediately\n        saveInitiated.current = true;\n        console.log(\"âš¡ Save initiated\");\n        \n        try {\n            console.log(\"Saving quiz result...\");\n            \n            // Step 1: Save explanations\n            const explanationResponse = await axios.post('https://localhost:3001/api/explanations/save', {\n                userID,\n                quizID,\n                topic: quizTopic,\n                explanationData: {\n                    quizData,\n                    userAnswers\n                }\n            });\n            \n            const explanationID = explanationResponse.data.explanationID;\n            console.log(\"Explanation saved with ID:\", explanationID);\n            \n            // Step 2: Save quiz results\n            const resultPayload = {\n                userID,\n                topic: quizTopic,\n                score,\n                total: quizData.length,\n                attempts: totalAttempts,\n                difficulty: quizDifficulty,\n                quizID,\n                explanationID,\n            };\n            \n            const resultRes = await axios.post(\"https://localhost:3001/api/result/save-results\", resultPayload);\n            if (resultRes.status === 200) {\n                console.log(\"Saved results successfully\");\n                quizSavedRef.current = true;\n            }\n        } catch (err) {\n            console.error(\"Failed to save quiz result or explanations:\", err);\n        }\n    };\n\n    const handleNextQuestion = () => {\n        // Save the user's answer for the current question\n        const newUserAnswers = [...userAnswers];\n        newUserAnswers[currentQuestion] = selectedAnswer;\n        setUserAnswers(newUserAnswers);\n        \n        // Check if the answer is correct and update score\n        if (selectedAnswer === quizData[currentQuestion].correctAnswer) {\n            setScore(score + 1);\n        }\n        \n        // Move to next question or show results\n        if (currentQuestion < quizData.length - 1) {\n            setCurrentQuestion(currentQuestion + 1);\n            setSelectedAnswer('');\n        } else {\n            setShowResults(true);\n            // Increment total attempts when quiz is completed\n            setTotalAttempts(totalAttempts + 1);\n            \n            // Call save directly here when quiz completes\n            saveQuizResults();\n        }\n    };\n\n    const handleRetakeQuiz = () => {\n        setCurrentQuestion(0);\n        setSelectedAnswer('');\n        setScore(0);\n        // Clear user answers\n        setUserAnswers(new Array(quizData.length).fill(''));\n        // Reset to first question\n        setShowResults(false);\n        setShowExplanations(false);\n        \n        // Reset saved state when retaking quiz\n        saveInitiated.current = false;\n        quizSavedRef.current = false;\n    };\n\n    const handleContinueTrying = () => {\n        // Reset to first question for another attempt\n        setCurrentQuestion(0);\n        setSelectedAnswer('');\n        setScore(0);\n        setShowResults(false);\n        // Keep user's previous answers for reference\n    };\n\n    // Go back to results without remounting QuizResult\n    const handleBackToResults = () => {\n        setHasSaved(\"true\")\n        setShowExplanations(false);\n    };\n\n    if (!quizData.length) return <div className=\"container mt-5 text-center\">Loading...</div>;\n\n    return (\n        <div className=\"container text-white mt-4 mb-4 p-4 border-0 rounded-4\" style={{backgroundColor: \"#1a1a1a\"}}>\n            <h1 className=\"text-center mb-4\">{quizTopic} Quiz</h1>\n            {!showResults ? (\n                <QuestionCard\n                    question={quizData[currentQuestion]}\n                    current={currentQuestion}\n                    total={quizData.length}\n                    selectedAnswer={selectedAnswer}\n                    onSelect={setSelectedAnswer}\n                    onNext={handleNextQuestion}\n                />\n            ) : !showExplanations ? (\n                <QuizResult\n                    topic={quizTopic}\n                    score={score}\n                    quizID={quizID}\n                    total={quizData.length}\n                    attempts={totalAttempts}\n                    onTryAgain={handleContinueTrying}\n                    difficulty={quizDifficulty}\n                    onShowExplanations={() => setShowExplanations(true)}\n                    navigate={navigate}\n                    quizData={quizData}\n                    userAnswers={userAnswers}\n                    quizType={quizType}\n                    // Remove all saving logic from QuizResult\n                />\n            ) : (\n                <QuizExplanations\n                    quizData={quizData}\n                    userAnswers={userAnswers}\n                    onRetake={handleRetakeQuiz}\n                    onBackToResults={handleBackToResults}\n                    navigate={navigate}\n                    readOnly={false}\n                    quizType={quizType}\n                    quizID={quizID}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default TakeQuiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}